#! /usr/bin/perl
#
# Host configuration command for sliceable switch application.
#
# Author: Yasunobu Chiba,
#         Masanori Ishino
#
# Copyright (C) 2011-2012 NEC Corporation
#           (C) 2013-2014 Masanori Ishino
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use warnings;
use bignum;
use Host;

my $Debug = 0;

my $DBFile = "host.db";
my $Config;

&main();

sub main(){
    if(defined($ENV{'HOST_DB_FILE'})){
	$DBFile = $ENV{'HOST_DB_FILE'};
    }

    my $config = Host->new($DBFile);
    if(!defined($config)){
	error("Failed to open host database.");
	exit;
    }

    my $Config = $config;
    my $action = $ARGV[0];

    if(!defined($action)){
	usage_and_exit();
    }

    if($action eq "list"){
	usage_and_exit() if @ARGV != 1;
	$config->list_hosts();
    }
    elsif($action eq "show"){
	usage_and_exit() if @ARGV != 2;

	my $mac_str = $ARGV[1];
	my $mac = mac_string_to_int($ARGV[1]);

	my $ret = $config->show_host($mac);
	if($ret == Host::NO_HOST_FOUND){
	    error("No host found.");
	}elsif($ret < 0){
	    error("Failed to get host (MAC: $mac_str) information.");
	}
    }
    elsif($action eq "add"){
	usage_and_exit() if (@ARGV < 4 || @ARGV > 5);

	my $mac_str = $ARGV[1];
	my $mac = mac_string_to_int($ARGV[1]);
   	my $datapath_id = hex($ARGV[2]);
    	my $port = hex($ARGV[3]);
	my $is_occupied = Host::FREE;
	if(defined($ARGV[4])){
	    $is_occupied = $ARGV[4];
	}
	
	my $ret = $config->add_host($mac, $datapath_id, $port, $is_occupied);
	if($ret == Host::SUCCEEDED){
	    info("A new host (MAC: $mac_str) is added successfully.");
	}else{
	    error("Failed to add new host (MAC: $mac_str).");
	}
    }
    elsif($action eq "delete"){
	usage_and_exit() if @ARGV != 2;

	my $mac_str = $ARGV[1];
	my $mac = mac_string_to_int($ARGV[1]);

	my $ret = $config->delete_host($mac);
	if($ret == Host::SUCCEEDED){
	    info("A host (MAC: $mac_str) is deleted successfully.");
	}
	elsif($ret == Host::NO_HOST_FOUND){
	    error("No host found.");
	}
	else{
	    error("Failed to delete a host (MAC: $mac_str).");
	}
    }
    elsif($action eq "modify-host-state"){
	usage_and_exit() if @ARGV != 3;

	my $mac_str = $ARGV[1];
	my $mac = mac_string_to_int($ARGV[1]);
	my $is_occupied = $ARGV[2];

	my $ret = $config->update_host_state($mac, $is_occupied);
	if($ret == Host::SUCCEEDED){
	    info("A stete of the host (MAC: $mac_str) is updated to $is_occupied successfully.");
	}
	elsif($ret == Host::NO_HOST_FOUND){
	    error("No host found.");
	}
	else{
	    error("Failed to modify state of the host (MAC: $mac_str).");
	}
    }
    elsif($action eq "show-number-of-available-hosts"){
	usage_and_exit() if @ARGV != 1;
	my $number_of_available_hosts = -1;
	
	$number_of_available_hosts = $config->get_number_of_available_hosts();
	if($number_of_available_hosts >= 0){
	    info("Number of available hosts: $number_of_available_hosts"); 
	}else{
	    error("Failed to get a number of available hosts."); 
	}
    }elsif($action eq "show-macs-of-available-hosts"){
	usage_and_exit() if @ARGV != 2;
	my @macs_available = ();
	my $number_of_ordered_hosts = -1;

	$number_of_ordered_hosts = $ARGV[1];	
	if($number_of_ordered_hosts < 1){
	    error("Number of ordered hosts should be >= 1.");
	    return;
	}

	@macs_available = $config->get_mac_of_some_available_hosts($number_of_ordered_hosts);
	if(@macs_available){
	    for my $temp_mac (@macs_available){
		printf("%20d\n", $temp_mac);
	    }
	}else{
	    info("Could not get $number_of_ordered_hosts available hosts.");
	}	
    }
    elsif($action eq "show-macs-str-of-available-hosts"){
	usage_and_exit() if @ARGV != 2;
	my @macs_str_available = ();
	my $number_of_ordered_hosts = -1;

	$number_of_ordered_hosts = $ARGV[1];	
	if($number_of_ordered_hosts < 1){
	    error("Number of ordered hosts should be >= 1.");
	    return;
	}

	@macs_str_available = $config->get_mac_str_of_some_available_hosts($number_of_ordered_hosts);
	if(@macs_str_available){
	    for my $temp_mac (@macs_str_available){
		printf("%20s\n", $temp_mac);
	    }
	}else{
	    info("Could not get $number_of_ordered_hosts available hosts.");
	}	
    }


    # elsif($action eq "add-port"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if (@ARGV < 5 || @ARGV > 6);
    # 	my $dpid = oct($ARGV[2]);
    # 	my $port = oct($ARGV[3]);
    # 	my $vid = oct($ARGV[4]);
    # 	my $id = sprintf("%04x%08x:%04x:%04x", $dpid >> 32, $dpid & 0xffffffff, $port, $vid);
    # 	if(defined($ARGV[5])){
    # 	    $id = $ARGV[5];
    # 	}
    # 	my $ret = $config->add_port($id, $slice, $dpid, $port, $vid);
    # 	if($ret == Slice::SUCCEEDED){
    # 	    info("A port is added successfully.");
    # 	}
    # 	elsif($ret == Slice::NO_SLICE_FOUND){
    # 	    error("No slice found.");
    # 	}
    # 	else{
    # 	    error("Failed to add a port.");
    # 	}
    # }
    # elsif($action eq "delete-port"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if @ARGV != 3;
    # 	my $id = $ARGV[2];
    # 	my $ret = $config->delete_binding_by_id($slice, $id);
    # 	if($ret == Slice::SUCCEEDED){
    # 	    info("A port is deleted successfully.");
    # 	}
    # 	elsif($ret == Slice::NO_SLICE_FOUND){
    # 	    error("No slice found.");
    # 	}
    # 	else{
    # 	    error("Failed to delete a port.");
    # 	}
    # }
    # elsif($action eq "show-port"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if (@ARGV < 2 || @ARGV > 3);
    # 	my $id;
    # 	if(defined($ARGV[2])){
    # 	    $id = $ARGV[2];
    # 	}
    # 	$config->show_bindings(Slice::BINDING_TYPE_PORT, $slice, $id);
    # }
    # elsif($action eq "add-mac"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if (@ARGV < 3 || @ARGV > 4);
    # 	my $mac = mac_string_to_int($ARGV[2]);
    # 	my $id = sprintf("%04x%08x", $mac >> 32, $mac & 0xffffffff);
    # 	if(defined($ARGV[3])){
    # 	    $id = $ARGV[3];
    # 	}
    # 	my $ret = $config->add_mac($id, $slice, $mac);
    # 	if($ret == Slice::SUCCEEDED){
    # 	    info("A MAC-based binding is added successfully.");
    # 	}
    # 	elsif($ret == Slice::NO_SLICE_FOUND){
    # 	    error("No slice found.");
    # 	}
    # 	else{
    # 	    error("Failed to add a MAC-based binding.");
    # 	}
    # }
    # elsif($action eq "delete-mac"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if @ARGV != 3;
    # 	my $id = $ARGV[2];
    # 	my $ret = $config->delete_binding_by_id($slice, $id);
    # 	if($ret == Slice::SUCCEEDED){
    # 	    info("A MAC-based binding is deleted successfully.");
    # 	}
    # 	elsif($ret == Slice::NO_SLICE_FOUND){
    # 	    error("No slice found.");
    # 	}
    # 	else{
    # 	    error("Failed to delete a MAC-based binding.");
    # 	}
    # }
    # elsif($action eq "show"){
    # 	usage_and_exit() if !defined($slice);
    # 	usage_and_exit() if @ARGV != 2;
    # 	if($config->show_description($slice) == Slice::SUCCEEDED){
    # 	    $config->show_bindings(Slice::BINDING_TYPE_ALL, $slice);
    # 	}
    # }
    else{
	usage_and_exit();
    }

    $config->close();
}


sub mac_string_to_int(){
    my ($string) = @_;

    $string =~ s/://g;

    return hex( "0x" . $string);
}


sub usage_and_exit(){
    if(defined($Config)){
	$Config->close();
    }
    usage();
    exit;
}


sub usage(){
    printf(STDERR "Usage:\n");
    printf(STDERR "  host list\n");
    printf(STDERR "  host show HOST_MAC\n");
    printf(STDERR "  host add HOST_MAC DATAPATH_ID PORT [IS_OCCUPIED]\n");
    printf(STDERR "  host delete HOST_MAC\n");
    printf(STDERR "  host modify-host-state HOST_MAC IS_OCCUPIED\n");
    printf(STDERR "  host show-number-of-available-hosts\n");
    printf(STDERR "  host show-macs-of-available-hosts NUMBER_OF_ORDERED_HOSTS\n");
    printf(STDERR "  host show-macs-str-of-available-hosts NUMBER_OF_ORDERED_HOSTS\n");
    #
    # printf(STDERR "  slice create SLICE_ID [DESCRIPTION]\n");
    # printf(STDERR "  slice modify SLICE_ID DESCRIPTION\n");
    # printf(STDERR "  slice destroy SLICE_ID\n");
    # printf(STDERR "  slice add-port SLICE_ID DPID PORT VID [BINDING_ID]\n");
    # printf(STDERR "  slice delete-port SLICE_ID BINDING_ID\n");
    # printf(STDERR "  slice show-port SLICE_ID [BINDING_ID]\n");
    # printf(STDERR "  slice add-mac SLICE_ID ADDRESS [BINDING_ID]\n");
    # printf(STDERR "  slice delete-mac SLICE_ID BINDING_ID\n");
    # printf(STDERR "  slice add-port-mac SLICE_ID PORT_BINDING_ID ADDRESS [BINDING_ID]\n");
    # printf(STDERR "  slice delete-port-mac SLICE_ID PORT_BINDING_ID BINDING_ID\n");
    # printf(STDERR "  slice show-port-mac SLICE_ID PORT_BINDING_ID [BINDING_ID]\n");
    # printf(STDERR "  slice show-mac SLICE_ID [BINDING_ID]\n");
    # printf(STDERR "  slice show SLICE_ID\n");
}


sub debug(){
    if($Debug){
	printf(@_);
	printf("\n");
    }
}


sub info(){
    printf(@_);
    printf("\n");
}


sub error(){
    printf(STDERR @_);
    printf(STDERR "\n");
}
